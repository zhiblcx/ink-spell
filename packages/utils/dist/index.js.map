{"version":3,"sources":["../src/TransformTimeUtils.ts"],"names":["TransformTimeUtils","timer","dayjs","format","timer1","timer2","unit","n"],"mappings":"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","file":"index.js","sourcesContent":["import dayjs from 'dayjs';\n\nexport class TransformTimeUtils {\n\n  /**\n  * @param {Date} [timer = new Date()] - 可选参数 表示要获取年份的时间戳，默认为当前时间\n  * @return {number} 给定时间戳的年份\n  * @example\n  * ```ts\n  * TransformTimeUtils.getYear()\n  * ```\n  */\n  static getYear(timer = new Date()) {\n    return dayjs(timer).year()\n  }\n\n  /**\n  * @param {Date} [timer = new Date()] - 可选参数 表示要获取月份的时间戳，默认为当前时间\n  * @return {number} 给定时间戳的月份\n  * @example\n  * ```ts\n  * TransformTimeUtils.getMonth()\n  * ```\n  */\n  static getMonth(timer = new Date()) {\n    return dayjs(timer).month() + 1\n  }\n\n  /**\n  * @param {Date} [timer = new Date()] - 可选参数 表示要获取日期的时间戳，默认为当前时间\n  * @return {number} 给定时间戳的日期\n  * @example\n  * ```ts\n  * TransformTimeUtils.getDate()\n  * ```\n  */\n  static getDate(timer = new Date()) {\n    return dayjs(timer).date()\n  }\n\n  /**\n  * @param {Date} [timer = new Date()] - 可选参数 表示要获取小时的时间戳，默认为当前时间\n  * @return {number} 给定时间的小时\n  * @example\n  * ```ts\n  * TransformTimeUtils.getHour()\n  * ```\n  */\n  static getHour(timer = new Date()) {\n    return dayjs(timer).hour()\n  }\n\n  /**\n  * @param {Date} [timer = new Date()] - 可选参数 表示要获取分钟的时间戳，默认为当前时间\n  * @return {number} 给定时间戳的分钟\n  * @example\n  * ```ts\n  * TransformTimeUtils.getMinute()\n  * ```\n  */\n  static getMinute(timer = new Date()) {\n    return dayjs(timer).minute()\n  }\n\n  /**\n  * @param {Date} [timer = new Date()] - 可选参数 表示要获取秒数的时间戳，默认为当前时间\n  * @return {number} 给定时间戳的秒数\n  * @example\n  * ```ts\n  * TransformTimeUtils.getSecond()\n  * ```\n  */\n  static getSecond(timer = new Date()) {\n    return dayjs(timer).second()\n  }\n\n  /**\n  * @param {Date} [timer = new Date()] - 可选参数 表示要获取的时间戳，默认为当前时间\n  * @return {number} 给定时间戳\n  * @example\n  * ```ts\n  * TransformTimeUtils.getTimestamp()\n  * ```\n  */\n  static getTimestamp(timer = new Date()) {\n    return dayjs(timer).valueOf()\n  }\n\n  /**\n  * @param {Date} [timer = new Date()] - 可选参数 表示要格式化的时间戳，默认为当前时间\n  * @param {string} [format = 'YYYY-MM-DD HH:mm:ss'] - 可选参数 表示要格式化的时间格式，默认为'YYYY-MM-DD HH:mm:ss'\n  * @return {string} 按照指定格式格式化的日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.formatDateYMDHMS()\n  * ```\n  */\n  static formatDateYMDHMS(timer = new Date(), format = 'YYYY-MM-DD HH:mm:ss') {\n    return dayjs(timer).format(format)\n  }\n\n  /**\n  * @param {Date} [timer = new Date()] - 可选参数 表示要格式化的时间戳，默认为当前时间\n  * @param {string} [format = 'YYYY-MM-DD HH:mm'] - 可选参数 表示要格式化的时间格式，默认为'YYYY-MM-DD HH:mm:ss'\n  * @return {string} 按照指定格式格式化的日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.formatDateYMDHM()\n  * ```\n  */\n  static formatDateYMDHM(timer = new Date(), format = 'YYYY-MM-DD HH:mm') {\n    return dayjs(timer).format(format)\n  }\n\n  /**\n  * @param {Date} [timer = new Date()] - 可选参数 表示要格式化的时间戳，默认为当前时间\n  * @param {string} [format = 'MM-DD HH:mm'] - 可选参数 表示要格式化的时间格式，默认为'MM-DD HH:mm'\n  * @return {string} 按照指定格式格式化的日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.formatDateMDHM()\n  * ```\n  */\n  static formatDateMDHM(timer = new Date(), format = 'MM-DD HH:mm') {\n    return dayjs(timer).format(format)\n  }\n\n  /**\n  * @param {Date} [timer = new Date()] - 可选参数 表示要格式化的时间戳，默认为当前时间\n  * @param {string} [format = 'YYYY-MM-DD'] - 可选参数 表示要格式化的时间格式，默认为'YYYY-MM-DD'\n  * @return {string} 按照指定格式格式化的日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.formatDateYMD()\n  * ```\n  */\n  static formatDateYMD(timer = new Date(), format = 'YYYY-MM-DD') {\n    return dayjs(timer).format(format)\n  }\n\n  /**\n  * @param {Date} [timer = new Date()] - 可选参数 表示要格式化的时间戳，默认为当前时间\n  * @param {string} [format = 'YYYY-MM'] - 可选参数 表示要格式化的时间格式，默认为'YYYY-MM'\n  * @return {string} 按照指定格式格式化的日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.formatDateYM()\n  * ```\n  */\n  static formatDateYM(timer = new Date(), format = 'YYYY-MM') {\n    return dayjs(timer).format(format)\n  }\n\n  /**\n  * @param {Date} [timer = new Date()] - 可选参数 表示要格式化的时间戳，默认为当前时间\n  * @param {string} [format = 'MM-DD'] - 可选参数 表示要格式化的时间格式，默认为'MM-DD'\n  * @return {string} 按照指定格式格式化的日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.formatDateMD()\n  * ```\n  */\n  static formatDateMD(timer = new Date(), format = 'MM-DD') {\n    return dayjs(timer).format(format)\n  }\n\n  /**\n  * @param {Date} [timer = new Date()] - 可选参数 表示要格式化的时间戳，默认为当前时间\n  * @param {string} [format = 'HH:mm:ss'] - 可选参数 表示要格式化的时间格式，默认为'HH:mm:ss'\n  * @return {string} 按照指定格式格式化的日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.formatDateHMS()\n  * ```\n  */\n  static formatDateHMS(timer = new Date(), format = 'HH:mm:ss') {\n    return dayjs(timer).format(format)\n  }\n\n  /**\n  * @param {Date} [timer = new Date()] - 可选参数 表示要格式化的时间戳，默认为当前时间\n  * @param {string} [format = 'HH:mm'] - 可选参数 表示要格式化的时间格式，默认为'HH:mm'\n  * @return {string} 按照指定格式格式化的日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.formatDateHM()\n  * ```\n  */\n  static formatDateHM(timer = new Date(), format = 'HH:mm') {\n    return dayjs(timer).format(format)\n  }\n\n  /**\n  * @param {Date} [timer = new Date()] - 可选参数 表示要格式化的时间戳，默认为当前时间\n  * @param {string} [format = 'mm:ss'] - 可选参数 表示要格式化的时间格式，默认为'mm:ss'\n  * @return {string} 按照指定格式格式化的日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.formatDateMS()\n  * ```\n  */\n  static formatDateMS(timer = new Date(), format = 'mm:ss') {\n    return dayjs(timer).format(format)\n  }\n\n  /**\n  * @param {Date} timer1 - 第一个时间戳，默认为当前时间\n  * @param {Date} timer2 - 第二个时间戳，默认为当前时间\n  * @returns {boolean} - 如果timer1 在 timer2 之前，则返回true，否则返回false\n  * @example\n  * ```ts\n  * TransformTimeUtils.compareTimer()\n  * ```\n  */\n  static compareTimer(timer1 = new Date(), timer2 = new Date()) {\n    return dayjs(timer1).isBefore(dayjs(timer2))\n  }\n\n  /**\n  * @param {Date} timer1 - 第一个时间戳，默认为当前时间\n  * @param {Date} timer2 - 第二个时间戳，默认为当前时间\n  * @param {QUnitType | OpUnitType} - 比较单位，默认为'minute'\n  * @returns {boolean} - 返回指定单位中两个日期时间之间的差异\n  * @example\n  * ```ts\n  * TransformTimeUtils.compareTimerMinute()\n  * ```\n  */\n  // 比较两个时间\n  static compareTimerMinute(timer1 = new Date(), timer2 = new Date(), unit?: dayjs.OpUnitType | dayjs.OpUnitType) {\n    if (timer1 < timer2) [timer1, timer2] = [timer2, timer1]\n    return dayjs(timer1).diff(dayjs(timer2), unit ?? 'minute')\n  }\n\n\n  /**\n  * @description 获取当前时间之前日期\n  * @param {number} n - 要获取的时间单位数量\n  * @param {dayjs.ManipulateType} [unit] - 要获取的时间单位，默认为'day'\n  * @param {string} [format] - 要返回的时间格式，默认为'YYYY-MM-DD'\n  * @returns {string} - 返回当前时间单位之前的指定日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.getUnitsBefore(2)\n  * ```\n  */\n  static getUnitsBefore(n: number, unit?: dayjs.ManipulateType, format = 'YYYY-MM-DD') {\n    return dayjs().subtract(n, unit ?? 'day').format(format)\n  }\n\n  /**\n  * @description 获取当前时间之后日期\n  * @param {number} n - 要获取的时间单位数量\n  * @param {dayjs.ManipulateType} [unit] - 要获取的时间单位，默认为'day'\n  * @param {string} [format] - 要返回的时间格式，默认为'YYYY-MM-DD'\n  * @returns {string} - 返回当前时间单位之前的指定日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.getUnitsAfter(2)\n  * ```\n  */\n  static getUnitsAfter(n: number, unit?: dayjs.ManipulateType, format = 'YYYY-MM-DD') {\n    return dayjs().add(n, unit ?? 'day').format(format)\n  }\n}\n"]}