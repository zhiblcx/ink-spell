{"version":3,"sources":["../src/TransformTimeUtils.ts"],"names":["TransformTimeUtils","timer","dayjs","format","timer1","timer2","unit","n","hour","minute","second"],"mappings":"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","file":"index.js","sourcesContent":["import dayjs from 'dayjs';\n\nexport class TransformTimeUtils {\n\n  /**\n  * @description 获取当前时间戳的年份\n  * @param {dayjs.Dayjs | Date} [timer =  dayjs()] - 可选参数 表示要获取年份的时间戳，默认为当前时间\n  * @return {number} 给定时间戳的年份\n  * @example\n  * ```ts\n  * TransformTimeUtils.getYear()\n  * ```\n  */\n  static getYear(timer: Date | dayjs.Dayjs = dayjs()): number {\n    return dayjs(timer).year()\n  }\n\n  /**\n  * @description 获取当前时间戳的月份\n  * @param {dayjs.Dayjs | Date} [timer =  dayjs()] - 可选参数 表示要获取月份的时间戳，默认为当前时间\n  * @return {number} 给定时间戳的月份\n  * @example\n  * ```ts\n  * TransformTimeUtils.getMonth()\n  * ```\n  */\n  static getMonth(timer: Date | dayjs.Dayjs = dayjs()): number {\n    return dayjs(timer).month() + 1\n  }\n\n  /**\n  * @description 获取当前时间戳的日期\n  * @param {dayjs.Dayjs | Date} [timer =  dayjs()] - 可选参数 表示要获取日期的时间戳，默认为当前时间\n  * @return {number} 给定时间戳的日期\n  * @example\n  * ```ts\n  * TransformTimeUtils.getDate()\n  * ```\n  */\n  static getDate(timer: Date | dayjs.Dayjs = dayjs()): number {\n    return dayjs(timer).date()\n  }\n\n  /**\n   * @description 获取当前时间戳的小时数\n  * @param {dayjs.Dayjs | Date} [timer =  dayjs()] - 可选参数 表示要获取小时的时间戳，默认为当前时间\n  * @return {number} 给定时间的小时\n  * @example\n  * ```ts\n  * TransformTimeUtils.getHour()\n  * ```\n  */\n  static getHour(timer: Date | dayjs.Dayjs = dayjs()): number {\n    return dayjs(timer).hour()\n  }\n\n  /**\n  * @description 获取当前时间戳的分钟数\n  * @param {dayjs.Dayjs | Date} [timer =  dayjs()] - 可选参数 表示要获取分钟的时间戳，默认为当前时间\n  * @return {number} 给定时间戳的分钟\n  * @example\n  * ```ts\n  * TransformTimeUtils.getMinute()\n  * ```\n  */\n  static getMinute(timer: Date | dayjs.Dayjs = dayjs()): number {\n    return dayjs(timer).minute()\n  }\n\n  /**\n  * @description 获取当前时间戳的秒数\n  * @param {dayjs.Dayjs | Date} [timer =  dayjs()] - 可选参数 表示要获取秒数的时间戳，默认为当前时间\n  * @return {number} 给定时间戳的秒数\n  * @example\n  * ```ts\n  * TransformTimeUtils.getSecond()\n  * ```\n  */\n  static getSecond(timer: Date | dayjs.Dayjs = dayjs()): number {\n    return dayjs(timer).second()\n  }\n\n  /**\n  * @description 获取当前时间戳\n  * @param {dayjs.Dayjs | Date} [timer =  dayjs()] - 可选参数 表示要获取的时间戳，默认为当前时间\n  * @return {number} 给定时间戳\n  * @example\n  * ```ts\n  * TransformTimeUtils.getTimestamp()\n  * ```\n  */\n  static getTimestamp(timer: Date | dayjs.Dayjs = dayjs()): number {\n    return dayjs(timer).valueOf()\n  }\n\n  /**\n   * @description 格式化时间戳为指定格式\n  * @param {dayjs.Dayjs | Date} [timer =  dayjs()] - 可选参数 表示要格式化的时间戳，默认为当前时间\n  * @param {string} [format = 'YYYY-MM-DD HH:mm:ss'] - 可选参数 表示要格式化的时间格式，默认为'YYYY-MM-DD HH:mm:ss'\n  * @return {string} 按照指定格式格式化的日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.formatDateYMDHMS()\n  * ```\n  */\n  static formatDateYMDHMS(timer: Date | dayjs.Dayjs = dayjs(), format = 'YYYY-MM-DD HH:mm:ss'): string {\n\n    return dayjs(timer).format(format)\n  }\n\n  /**\n   * @description 格式化时间戳为指定格式\n  * @param {dayjs.Dayjs | Date} [timer =  dayjs()] - 可选参数 表示要格式化的时间戳，默认为当前时间\n  * @param {string} [format = 'YYYY-MM-DD HH:mm'] - 可选参数 表示要格式化的时间格式，默认为'YYYY-MM-DD HH:mm:ss'\n  * @return {string} 按照指定格式格式化的日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.formatDateYMDHM()\n  * ```\n  */\n  static formatDateYMDHM(timer: Date | dayjs.Dayjs = dayjs(), format = 'YYYY-MM-DD HH:mm'): string {\n    return dayjs(timer).format(format)\n  }\n\n  /**\n   * @description 格式化时间戳为指定格式\n  * @param {dayjs.Dayjs | Date} [timer =  dayjs()] - 可选参数 表示要格式化的时间戳，默认为当前时间\n  * @param {string} [format = 'MM-DD HH:mm'] - 可选参数 表示要格式化的时间格式，默认为'MM-DD HH:mm'\n  * @return {string} 按照指定格式格式化的日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.formatDateMDHM()\n  * ```\n  */\n  static formatDateMDHM(timer: Date | dayjs.Dayjs = dayjs(), format = 'MM-DD HH:mm'): string {\n    return dayjs(timer).format(format)\n  }\n\n  /**\n   * @description 格式化时间戳为指定格式\n  * @param {dayjs.Dayjs | Date} [timer =  dayjs()] - 可选参数 表示要格式化的时间戳，默认为当前时间\n  * @param {string} [format = 'YYYY-MM-DD'] - 可选参数 表示要格式化的时间格式，默认为'YYYY-MM-DD'\n  * @return {string} 按照指定格式格式化的日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.formatDateYMD()\n  * ```\n  */\n  static formatDateYMD(timer: Date | dayjs.Dayjs = dayjs(), format = 'YYYY-MM-DD'): string {\n    return dayjs(timer).format(format)\n  }\n\n  /**\n   * @description 格式化时间戳为指定格式\n  * @param {dayjs.Dayjs | Date} [timer =  dayjs()] - 可选参数 表示要格式化的时间戳，默认为当前时间\n  * @param {string} [format = 'YYYY-MM'] - 可选参数 表示要格式化的时间格式，默认为'YYYY-MM'\n  * @return {string} 按照指定格式格式化的日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.formatDateYM()\n  * ```\n  */\n  static formatDateYM(timer: Date | dayjs.Dayjs = dayjs(), format = 'YYYY-MM'): string {\n    return dayjs(timer).format(format)\n  }\n\n  /**\n   * @description 格式化时间戳为指定格式\n  * @param {dayjs.Dayjs | Date} [timer =  dayjs()] - 可选参数 表示要格式化的时间戳，默认为当前时间\n  * @param {string} [format = 'MM-DD'] - 可选参数 表示要格式化的时间格式，默认为'MM-DD'\n  * @return {string} 按照指定格式格式化的日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.formatDateMD()\n  * ```\n  */\n  static formatDateMD(timer: Date | dayjs.Dayjs = dayjs(), format = 'MM-DD'): string {\n    return dayjs(timer).format(format)\n  }\n\n  /**\n   * @description 格式化时间戳为指定格式\n  * @param {dayjs.Dayjs | Date} [timer =  dayjs()] - 可选参数 表示要格式化的时间戳，默认为当前时间\n  * @param {string} [format = 'HH:mm:ss'] - 可选参数 表示要格式化的时间格式，默认为'HH:mm:ss'\n  * @return {string} 按照指定格式格式化的日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.formatDateHMS()\n  * ```\n  */\n  static formatDateHMS(timer: Date | dayjs.Dayjs = dayjs(), format = 'HH:mm:ss'): string {\n    return dayjs(timer).format(format)\n  }\n\n  /**\n   * @description 格式化时间戳为指定格式\n  * @param {dayjs.Dayjs | Date} [timer =  dayjs()] - 可选参数 表示要格式化的时间戳，默认为当前时间\n  * @param {string} [format = 'HH:mm'] - 可选参数 表示要格式化的时间格式，默认为'HH:mm'\n  * @return {string} 按照指定格式格式化的日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.formatDateHM()\n  * ```\n  */\n  static formatDateHM(timer: Date | dayjs.Dayjs = dayjs(), format = 'HH:mm'): string {\n    return dayjs(timer).format(format)\n  }\n\n  /**\n   * @description 格式化时间戳为指定格式\n  * @param {dayjs.Dayjs | Date} [timer =  dayjs()] - 可选参数 表示要格式化的时间戳，默认为当前时间\n  * @param {string} [format = 'mm:ss'] - 可选参数 表示要格式化的时间格式，默认为'mm:ss'\n  * @return {string} 按照指定格式格式化的日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.formatDateMS()\n  * ```\n  */\n  static formatDateMS(timer: Date | dayjs.Dayjs = dayjs(), format = 'mm:ss'): string {\n    return dayjs(timer).format(format)\n  }\n\n  /**\n   * @description 比较两个时间戳的大小\n  * @param {dayjs.Dayjs | Date} timer1 - 第一个时间戳，默认为当前时间\n  * @param {dayjs.Dayjs | Date} timer2 - 第二个时间戳，默认为当前时间\n  * @returns {boolean} - 如果timer1 在 timer2 之前，则返回true，否则返回false\n  * @example\n  * ```ts\n  * TransformTimeUtils.compareTimer()\n  * ```\n  */\n  static compareTimer(timer1: Date | dayjs.Dayjs = dayjs(), timer2: Date | dayjs.Dayjs = dayjs()): boolean {\n    return dayjs(timer1).isBefore(dayjs(timer2))\n  }\n\n  /**\n   * @description 比较两个时间的差异\n  * @param {dayjs.Dayjs | Date} timer1 - 第一个时间戳，默认为当前时间\n  * @param {dayjs.Dayjs | Date} timer2 - 第二个时间戳，默认为当前时间\n  * @param {QUnitType | OpUnitType} - 比较单位，默认为'minute'\n  * @returns {boolean} - 返回指定单位中两个日期时间之间的差异\n  * @example\n  * ```ts\n  * TransformTimeUtils.compareTimerDiff()\n  * ```\n  */\n  static compareTimerDiff(timer1: Date | dayjs.Dayjs = dayjs(), timer2: Date | dayjs.Dayjs = dayjs(), unit?: dayjs.OpUnitType | dayjs.OpUnitType): number {\n    if (timer1 < timer2) [timer1, timer2] = [timer2, timer1]\n    return dayjs(timer1).diff(dayjs(timer2), unit ?? 'minute')\n  }\n\n\n  /**\n  * @description 获取指定时间之前日期\n  * @param {number} n - 要获取的时间单位数量\n  * @param {dayjs.Dayjs | Date} timer - 指定的时间，默认为当前时间\n  * @param {dayjs.ManipulateType} [unit] - 要获取的时间单位，默认为'day'\n  * @param {string} [format] - 要返回的时间格式，默认为'YYYY-MM-DD'\n  * @returns {string} - 返回指定时间单位之前的指定日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.getUnitsBefore(2)\n  * ```\n  */\n  static getUnitsBefore(n: number, timer: Date | dayjs.Dayjs = dayjs(), unit: dayjs.ManipulateType = 'day', format = 'YYYY-MM-DD'): string {\n    return dayjs(timer).subtract(n, unit).format(format)\n  }\n\n  /**\n  * @description 获取指定时间之后日期\n  * @param {number} n - 要获取的时间单位数量\n  * @param {dayjs.Dayjs | Date} timer - 指定的时间，默认为当前时间\n  * @param {dayjs.ManipulateType} [unit] - 要获取的时间单位，默认为'day'\n  * @param {string} [format] - 要返回的时间格式，默认为'YYYY-MM-DD'\n  * @returns {string} - 返回指定时间时间单位之前的指定日期时间字符串\n  * @example\n  * ```ts\n  * TransformTimeUtils.getUnitsAfter(2)\n  * ```\n  */\n  static getUnitsAfter(n: number, timer: Date | dayjs.Dayjs = dayjs(), unit: dayjs.ManipulateType = 'day', format = 'YYYY-MM-DD'): string {\n    return dayjs(timer).add(n, unit).format(format)\n  }\n\n  /**\n  * @description 获取未来特定天数的特定时间\n  * @param {number} n - 要获取的时间单位数量\n  * @param {dayjs.ManipulateType} unit - 要获取的时间单位，默认为'day'\n  * @param {number} hour - 要获取的小时数\n  * @param {number} minute - 要获取的分钟数，默认为0\n  * @param {number} second - 要获取的秒数，默认为0\n  * @returns {dayjs.Dayjs} - 返回未来特定天数的特定时间\n  * @example\n  * ```ts\n  * TransformTimeUtils.getSpecificTimeInFuture(1,6)\n  * ```\n  */\n  static getSpecificTimeInFuture({ n, unit = 'day', hour, minute = 0, second = 0 }: {\n    n: number; unit: dayjs.ManipulateType; hour: number; minute: number; second: number\n  }): dayjs.Dayjs {\n    return dayjs().add(n, unit).hour(hour).minute(minute).second(second)\n  }\n\n  /**\n  * @description 获取过去特定天数的特定时间\n  * @param {number} n - 要获取的时间单位数量\n  * @param {dayjs.ManipulateType} unit - 要获取的时间单位，默认为'day'\n  * @param {number} hour - 要获取的小时数\n  * @param {number} minute - 要获取的分钟数，默认为0\n  * @param {number} second - 要获取的秒数，默认为0\n  * @returns {dayjs.Dayjs} - 返回过去特定天数的特定时间\n  * @example\n  * ```ts\n  * TransformTimeUtils.getSpecificTimeInPass(1,6)\n  * ```\n  */\n  static getSpecificTimeInPass({ n, unit = 'day', hour, minute = 0, second = 0 }: {\n    n: number; unit: dayjs.ManipulateType; hour: number; minute: number; second: number\n  }): dayjs.Dayjs {\n    return dayjs().subtract(n, unit).hour(hour).minute(minute).second(second)\n  }\n}\n"]}