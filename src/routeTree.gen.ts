/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as BookBookIdRouteImport } from './routes/book/$bookId/route'
import { Route as BaseBookshelfInkIdRouteImport } from './routes/_base/bookshelf/$inkId/route'

// Create Virtual Routes

const SignupRouteLazyImport = createFileRoute('/signup')()
const SigninRouteLazyImport = createFileRoute('/signin')()
const BaseRouteLazyImport = createFileRoute('/_base')()
const R404RouteLazyImport = createFileRoute('/404')()
const BaseMyfriendRouteLazyImport = createFileRoute('/_base/myfriend')()
const BaseChatroomRouteLazyImport = createFileRoute('/_base/chatroom')()
const BaseIndexRouteLazyImport = createFileRoute('/_base/')()

// Create/Update Routes

const SignupRouteLazyRoute = SignupRouteLazyImport.update({
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/signup/route.lazy').then((d) => d.Route))

const SigninRouteLazyRoute = SigninRouteLazyImport.update({
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/signin/route.lazy').then((d) => d.Route))

const BaseRouteLazyRoute = BaseRouteLazyImport.update({
  id: '/_base',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/_base/route.lazy').then((d) => d.Route))

const R404RouteLazyRoute = R404RouteLazyImport.update({
  path: '/404',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/404/route.lazy').then((d) => d.Route))

const BaseMyfriendRouteLazyRoute = BaseMyfriendRouteLazyImport.update({
  path: '/myfriend',
  getParentRoute: () => BaseRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/_base/myfriend/route.lazy').then((d) => d.Route),
)

const BaseChatroomRouteLazyRoute = BaseChatroomRouteLazyImport.update({
  path: '/chatroom',
  getParentRoute: () => BaseRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/_base/chatroom/route.lazy').then((d) => d.Route),
)

const BaseIndexRouteLazyRoute = BaseIndexRouteLazyImport.update({
  path: '/',
  getParentRoute: () => BaseRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/_base/index/route.lazy').then((d) => d.Route),
)

const BookBookIdRouteRoute = BookBookIdRouteImport.update({
  path: '/book/$bookId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/book/$bookId/route.lazy').then((d) => d.Route),
)

const BaseBookshelfInkIdRouteRoute = BaseBookshelfInkIdRouteImport.update({
  path: '/bookshelf/$inkId',
  getParentRoute: () => BaseRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/_base/bookshelf/$inkId/route.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/404': {
      id: '/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof R404RouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/_base': {
      id: '/_base'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof BaseRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/book/$bookId': {
      id: '/book/$bookId'
      path: '/book/$bookId'
      fullPath: '/book/$bookId'
      preLoaderRoute: typeof BookBookIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/_base/': {
      id: '/_base/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof BaseIndexRouteLazyImport
      parentRoute: typeof BaseRouteLazyImport
    }
    '/_base/chatroom': {
      id: '/_base/chatroom'
      path: '/chatroom'
      fullPath: '/chatroom'
      preLoaderRoute: typeof BaseChatroomRouteLazyImport
      parentRoute: typeof BaseRouteLazyImport
    }
    '/_base/myfriend': {
      id: '/_base/myfriend'
      path: '/myfriend'
      fullPath: '/myfriend'
      preLoaderRoute: typeof BaseMyfriendRouteLazyImport
      parentRoute: typeof BaseRouteLazyImport
    }
    '/_base/bookshelf/$inkId': {
      id: '/_base/bookshelf/$inkId'
      path: '/bookshelf/$inkId'
      fullPath: '/bookshelf/$inkId'
      preLoaderRoute: typeof BaseBookshelfInkIdRouteImport
      parentRoute: typeof BaseRouteLazyImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  R404RouteLazyRoute,
  BaseRouteLazyRoute: BaseRouteLazyRoute.addChildren({
    BaseIndexRouteLazyRoute,
    BaseChatroomRouteLazyRoute,
    BaseMyfriendRouteLazyRoute,
    BaseBookshelfInkIdRouteRoute,
  }),
  SigninRouteLazyRoute,
  SignupRouteLazyRoute,
  BookBookIdRouteRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/404",
        "/_base",
        "/signin",
        "/signup",
        "/book/$bookId"
      ]
    },
    "/404": {
      "filePath": "404/route.lazy.tsx"
    },
    "/_base": {
      "filePath": "_base/route.lazy.tsx",
      "children": [
        "/_base/",
        "/_base/chatroom",
        "/_base/myfriend",
        "/_base/bookshelf/$inkId"
      ]
    },
    "/signin": {
      "filePath": "signin/route.lazy.tsx"
    },
    "/signup": {
      "filePath": "signup/route.lazy.tsx"
    },
    "/book/$bookId": {
      "filePath": "book/$bookId/route.tsx"
    },
    "/_base/": {
      "filePath": "_base/index/route.lazy.tsx",
      "parent": "/_base"
    },
    "/_base/chatroom": {
      "filePath": "_base/chatroom/route.lazy.tsx",
      "parent": "/_base"
    },
    "/_base/myfriend": {
      "filePath": "_base/myfriend/route.lazy.tsx",
      "parent": "/_base"
    },
    "/_base/bookshelf/$inkId": {
      "filePath": "_base/bookshelf/$inkId/route.tsx",
      "parent": "/_base"
    }
  }
}
ROUTE_MANIFEST_END */
